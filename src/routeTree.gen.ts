/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AccountRecoveryIndexRouteImport } from './routes/account-recovery/index'
import { Route as UserIdRouteImport } from './routes/user/$id'
import { Route as FragranceIdRouteImport } from './routes/fragrance/$id'
import { Route as CollectionIdRouteImport } from './routes/collection/$id'
import { Route as AccountRecoverySuccessRouteImport } from './routes/account-recovery/success'
import { Route as AccountRecoveryConfirmRouteImport } from './routes/account-recovery/confirm'
import { Route as UserIdIndexRouteImport } from './routes/user/$id/index'
import { Route as FragranceIdIndexRouteImport } from './routes/fragrance/$id/index'
import { Route as CollectionIdIndexRouteImport } from './routes/collection/$id/index'
import { Route as UserIdReviewsRouteImport } from './routes/user/$id/reviews'
import { Route as UserIdLikesRouteImport } from './routes/user/$id/likes'
import { Route as FragranceIdReviewRouteImport } from './routes/fragrance/$id/review'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRecoveryIndexRoute = AccountRecoveryIndexRouteImport.update({
  id: '/account-recovery/',
  path: '/account-recovery/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIdRoute = UserIdRouteImport.update({
  id: '/user/$id',
  path: '/user/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FragranceIdRoute = FragranceIdRouteImport.update({
  id: '/fragrance/$id',
  path: '/fragrance/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionIdRoute = CollectionIdRouteImport.update({
  id: '/collection/$id',
  path: '/collection/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRecoverySuccessRoute = AccountRecoverySuccessRouteImport.update({
  id: '/account-recovery/success',
  path: '/account-recovery/success',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRecoveryConfirmRoute = AccountRecoveryConfirmRouteImport.update({
  id: '/account-recovery/confirm',
  path: '/account-recovery/confirm',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIdIndexRoute = UserIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserIdRoute,
} as any)
const FragranceIdIndexRoute = FragranceIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FragranceIdRoute,
} as any)
const CollectionIdIndexRoute = CollectionIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CollectionIdRoute,
} as any)
const UserIdReviewsRoute = UserIdReviewsRouteImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => UserIdRoute,
} as any)
const UserIdLikesRoute = UserIdLikesRouteImport.update({
  id: '/likes',
  path: '/likes',
  getParentRoute: () => UserIdRoute,
} as any)
const FragranceIdReviewRoute = FragranceIdReviewRouteImport.update({
  id: '/review',
  path: '/review',
  getParentRoute: () => FragranceIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account-recovery/confirm': typeof AccountRecoveryConfirmRoute
  '/account-recovery/success': typeof AccountRecoverySuccessRoute
  '/collection/$id': typeof CollectionIdRouteWithChildren
  '/fragrance/$id': typeof FragranceIdRouteWithChildren
  '/user/$id': typeof UserIdRouteWithChildren
  '/account-recovery': typeof AccountRecoveryIndexRoute
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/collection/$id/': typeof CollectionIdIndexRoute
  '/fragrance/$id/': typeof FragranceIdIndexRoute
  '/user/$id/': typeof UserIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account-recovery/confirm': typeof AccountRecoveryConfirmRoute
  '/account-recovery/success': typeof AccountRecoverySuccessRoute
  '/account-recovery': typeof AccountRecoveryIndexRoute
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/collection/$id': typeof CollectionIdIndexRoute
  '/fragrance/$id': typeof FragranceIdIndexRoute
  '/user/$id': typeof UserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account-recovery/confirm': typeof AccountRecoveryConfirmRoute
  '/account-recovery/success': typeof AccountRecoverySuccessRoute
  '/collection/$id': typeof CollectionIdRouteWithChildren
  '/fragrance/$id': typeof FragranceIdRouteWithChildren
  '/user/$id': typeof UserIdRouteWithChildren
  '/account-recovery/': typeof AccountRecoveryIndexRoute
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/collection/$id/': typeof CollectionIdIndexRoute
  '/fragrance/$id/': typeof FragranceIdIndexRoute
  '/user/$id/': typeof UserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account-recovery/confirm'
    | '/account-recovery/success'
    | '/collection/$id'
    | '/fragrance/$id'
    | '/user/$id'
    | '/account-recovery'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/collection/$id/'
    | '/fragrance/$id/'
    | '/user/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account-recovery/confirm'
    | '/account-recovery/success'
    | '/account-recovery'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/collection/$id'
    | '/fragrance/$id'
    | '/user/$id'
  id:
    | '__root__'
    | '/'
    | '/account-recovery/confirm'
    | '/account-recovery/success'
    | '/collection/$id'
    | '/fragrance/$id'
    | '/user/$id'
    | '/account-recovery/'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/collection/$id/'
    | '/fragrance/$id/'
    | '/user/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRecoveryConfirmRoute: typeof AccountRecoveryConfirmRoute
  AccountRecoverySuccessRoute: typeof AccountRecoverySuccessRoute
  CollectionIdRoute: typeof CollectionIdRouteWithChildren
  FragranceIdRoute: typeof FragranceIdRouteWithChildren
  UserIdRoute: typeof UserIdRouteWithChildren
  AccountRecoveryIndexRoute: typeof AccountRecoveryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account-recovery/': {
      id: '/account-recovery/'
      path: '/account-recovery'
      fullPath: '/account-recovery'
      preLoaderRoute: typeof AccountRecoveryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$id': {
      id: '/user/$id'
      path: '/user/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof UserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fragrance/$id': {
      id: '/fragrance/$id'
      path: '/fragrance/$id'
      fullPath: '/fragrance/$id'
      preLoaderRoute: typeof FragranceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection/$id': {
      id: '/collection/$id'
      path: '/collection/$id'
      fullPath: '/collection/$id'
      preLoaderRoute: typeof CollectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account-recovery/success': {
      id: '/account-recovery/success'
      path: '/account-recovery/success'
      fullPath: '/account-recovery/success'
      preLoaderRoute: typeof AccountRecoverySuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account-recovery/confirm': {
      id: '/account-recovery/confirm'
      path: '/account-recovery/confirm'
      fullPath: '/account-recovery/confirm'
      preLoaderRoute: typeof AccountRecoveryConfirmRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$id/': {
      id: '/user/$id/'
      path: '/'
      fullPath: '/user/$id/'
      preLoaderRoute: typeof UserIdIndexRouteImport
      parentRoute: typeof UserIdRoute
    }
    '/fragrance/$id/': {
      id: '/fragrance/$id/'
      path: '/'
      fullPath: '/fragrance/$id/'
      preLoaderRoute: typeof FragranceIdIndexRouteImport
      parentRoute: typeof FragranceIdRoute
    }
    '/collection/$id/': {
      id: '/collection/$id/'
      path: '/'
      fullPath: '/collection/$id/'
      preLoaderRoute: typeof CollectionIdIndexRouteImport
      parentRoute: typeof CollectionIdRoute
    }
    '/user/$id/reviews': {
      id: '/user/$id/reviews'
      path: '/reviews'
      fullPath: '/user/$id/reviews'
      preLoaderRoute: typeof UserIdReviewsRouteImport
      parentRoute: typeof UserIdRoute
    }
    '/user/$id/likes': {
      id: '/user/$id/likes'
      path: '/likes'
      fullPath: '/user/$id/likes'
      preLoaderRoute: typeof UserIdLikesRouteImport
      parentRoute: typeof UserIdRoute
    }
    '/fragrance/$id/review': {
      id: '/fragrance/$id/review'
      path: '/review'
      fullPath: '/fragrance/$id/review'
      preLoaderRoute: typeof FragranceIdReviewRouteImport
      parentRoute: typeof FragranceIdRoute
    }
  }
}

interface CollectionIdRouteChildren {
  CollectionIdIndexRoute: typeof CollectionIdIndexRoute
}

const CollectionIdRouteChildren: CollectionIdRouteChildren = {
  CollectionIdIndexRoute: CollectionIdIndexRoute,
}

const CollectionIdRouteWithChildren = CollectionIdRoute._addFileChildren(
  CollectionIdRouteChildren,
)

interface FragranceIdRouteChildren {
  FragranceIdReviewRoute: typeof FragranceIdReviewRoute
  FragranceIdIndexRoute: typeof FragranceIdIndexRoute
}

const FragranceIdRouteChildren: FragranceIdRouteChildren = {
  FragranceIdReviewRoute: FragranceIdReviewRoute,
  FragranceIdIndexRoute: FragranceIdIndexRoute,
}

const FragranceIdRouteWithChildren = FragranceIdRoute._addFileChildren(
  FragranceIdRouteChildren,
)

interface UserIdRouteChildren {
  UserIdLikesRoute: typeof UserIdLikesRoute
  UserIdReviewsRoute: typeof UserIdReviewsRoute
  UserIdIndexRoute: typeof UserIdIndexRoute
}

const UserIdRouteChildren: UserIdRouteChildren = {
  UserIdLikesRoute: UserIdLikesRoute,
  UserIdReviewsRoute: UserIdReviewsRoute,
  UserIdIndexRoute: UserIdIndexRoute,
}

const UserIdRouteWithChildren =
  UserIdRoute._addFileChildren(UserIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRecoveryConfirmRoute: AccountRecoveryConfirmRoute,
  AccountRecoverySuccessRoute: AccountRecoverySuccessRoute,
  CollectionIdRoute: CollectionIdRouteWithChildren,
  FragranceIdRoute: FragranceIdRouteWithChildren,
  UserIdRoute: UserIdRouteWithChildren,
  AccountRecoveryIndexRoute: AccountRecoveryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
