/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UserIdImport } from './routes/user/$id'
import { Route as FragranceIdImport } from './routes/fragrance/$id'
import { Route as UserIdIndexImport } from './routes/user/$id/index'
import { Route as FragranceIdIndexImport } from './routes/fragrance/$id/index'
import { Route as UserIdReviewsImport } from './routes/user/$id/reviews'
import { Route as UserIdLikesImport } from './routes/user/$id/likes'
import { Route as FragranceIdReviewImport } from './routes/fragrance/$id/review'
import { Route as UserIdCollectionIdImport } from './routes/user/$id/collection/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserIdRoute = UserIdImport.update({
  id: '/user/$id',
  path: '/user/$id',
  getParentRoute: () => rootRoute,
} as any)

const FragranceIdRoute = FragranceIdImport.update({
  id: '/fragrance/$id',
  path: '/fragrance/$id',
  getParentRoute: () => rootRoute,
} as any)

const UserIdIndexRoute = UserIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserIdRoute,
} as any)

const FragranceIdIndexRoute = FragranceIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FragranceIdRoute,
} as any)

const UserIdReviewsRoute = UserIdReviewsImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => UserIdRoute,
} as any)

const UserIdLikesRoute = UserIdLikesImport.update({
  id: '/likes',
  path: '/likes',
  getParentRoute: () => UserIdRoute,
} as any)

const FragranceIdReviewRoute = FragranceIdReviewImport.update({
  id: '/review',
  path: '/review',
  getParentRoute: () => FragranceIdRoute,
} as any)

const UserIdCollectionIdRoute = UserIdCollectionIdImport.update({
  id: '/collection/$id',
  path: '/collection/$id',
  getParentRoute: () => UserIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/fragrance/$id': {
      id: '/fragrance/$id'
      path: '/fragrance/$id'
      fullPath: '/fragrance/$id'
      preLoaderRoute: typeof FragranceIdImport
      parentRoute: typeof rootRoute
    }
    '/user/$id': {
      id: '/user/$id'
      path: '/user/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof UserIdImport
      parentRoute: typeof rootRoute
    }
    '/fragrance/$id/review': {
      id: '/fragrance/$id/review'
      path: '/review'
      fullPath: '/fragrance/$id/review'
      preLoaderRoute: typeof FragranceIdReviewImport
      parentRoute: typeof FragranceIdImport
    }
    '/user/$id/likes': {
      id: '/user/$id/likes'
      path: '/likes'
      fullPath: '/user/$id/likes'
      preLoaderRoute: typeof UserIdLikesImport
      parentRoute: typeof UserIdImport
    }
    '/user/$id/reviews': {
      id: '/user/$id/reviews'
      path: '/reviews'
      fullPath: '/user/$id/reviews'
      preLoaderRoute: typeof UserIdReviewsImport
      parentRoute: typeof UserIdImport
    }
    '/fragrance/$id/': {
      id: '/fragrance/$id/'
      path: '/'
      fullPath: '/fragrance/$id/'
      preLoaderRoute: typeof FragranceIdIndexImport
      parentRoute: typeof FragranceIdImport
    }
    '/user/$id/': {
      id: '/user/$id/'
      path: '/'
      fullPath: '/user/$id/'
      preLoaderRoute: typeof UserIdIndexImport
      parentRoute: typeof UserIdImport
    }
    '/user/$id/collection/$id': {
      id: '/user/$id/collection/$id'
      path: '/collection/$id'
      fullPath: '/user/$id/collection/$id'
      preLoaderRoute: typeof UserIdCollectionIdImport
      parentRoute: typeof UserIdImport
    }
  }
}

// Create and export the route tree

interface FragranceIdRouteChildren {
  FragranceIdReviewRoute: typeof FragranceIdReviewRoute
  FragranceIdIndexRoute: typeof FragranceIdIndexRoute
}

const FragranceIdRouteChildren: FragranceIdRouteChildren = {
  FragranceIdReviewRoute: FragranceIdReviewRoute,
  FragranceIdIndexRoute: FragranceIdIndexRoute,
}

const FragranceIdRouteWithChildren = FragranceIdRoute._addFileChildren(
  FragranceIdRouteChildren,
)

interface UserIdRouteChildren {
  UserIdLikesRoute: typeof UserIdLikesRoute
  UserIdReviewsRoute: typeof UserIdReviewsRoute
  UserIdIndexRoute: typeof UserIdIndexRoute
  UserIdCollectionIdRoute: typeof UserIdCollectionIdRoute
}

const UserIdRouteChildren: UserIdRouteChildren = {
  UserIdLikesRoute: UserIdLikesRoute,
  UserIdReviewsRoute: UserIdReviewsRoute,
  UserIdIndexRoute: UserIdIndexRoute,
  UserIdCollectionIdRoute: UserIdCollectionIdRoute,
}

const UserIdRouteWithChildren =
  UserIdRoute._addFileChildren(UserIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/fragrance/$id': typeof FragranceIdRouteWithChildren
  '/user/$id': typeof UserIdRouteWithChildren
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/fragrance/$id/': typeof FragranceIdIndexRoute
  '/user/$id/': typeof UserIdIndexRoute
  '/user/$id/collection/$id': typeof UserIdCollectionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/fragrance/$id': typeof FragranceIdIndexRoute
  '/user/$id': typeof UserIdIndexRoute
  '/user/$id/collection/$id': typeof UserIdCollectionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/fragrance/$id': typeof FragranceIdRouteWithChildren
  '/user/$id': typeof UserIdRouteWithChildren
  '/fragrance/$id/review': typeof FragranceIdReviewRoute
  '/user/$id/likes': typeof UserIdLikesRoute
  '/user/$id/reviews': typeof UserIdReviewsRoute
  '/fragrance/$id/': typeof FragranceIdIndexRoute
  '/user/$id/': typeof UserIdIndexRoute
  '/user/$id/collection/$id': typeof UserIdCollectionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/fragrance/$id'
    | '/user/$id'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/fragrance/$id/'
    | '/user/$id/'
    | '/user/$id/collection/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/fragrance/$id'
    | '/user/$id'
    | '/user/$id/collection/$id'
  id:
    | '__root__'
    | '/'
    | '/fragrance/$id'
    | '/user/$id'
    | '/fragrance/$id/review'
    | '/user/$id/likes'
    | '/user/$id/reviews'
    | '/fragrance/$id/'
    | '/user/$id/'
    | '/user/$id/collection/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FragranceIdRoute: typeof FragranceIdRouteWithChildren
  UserIdRoute: typeof UserIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FragranceIdRoute: FragranceIdRouteWithChildren,
  UserIdRoute: UserIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/fragrance/$id",
        "/user/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/fragrance/$id": {
      "filePath": "fragrance/$id.tsx",
      "children": [
        "/fragrance/$id/review",
        "/fragrance/$id/"
      ]
    },
    "/user/$id": {
      "filePath": "user/$id.tsx",
      "children": [
        "/user/$id/likes",
        "/user/$id/reviews",
        "/user/$id/",
        "/user/$id/collection/$id"
      ]
    },
    "/fragrance/$id/review": {
      "filePath": "fragrance/$id/review.tsx",
      "parent": "/fragrance/$id"
    },
    "/user/$id/likes": {
      "filePath": "user/$id/likes.tsx",
      "parent": "/user/$id"
    },
    "/user/$id/reviews": {
      "filePath": "user/$id/reviews.tsx",
      "parent": "/user/$id"
    },
    "/fragrance/$id/": {
      "filePath": "fragrance/$id/index.tsx",
      "parent": "/fragrance/$id"
    },
    "/user/$id/": {
      "filePath": "user/$id/index.tsx",
      "parent": "/user/$id"
    },
    "/user/$id/collection/$id": {
      "filePath": "user/$id/collection/$id.tsx",
      "parent": "/user/$id"
    }
  }
}
ROUTE_MANIFEST_END */
