/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteRouteImport } from './routes/users/route'
import { Route as SearchRouteRouteImport } from './routes/search/route'
import { Route as FragrancesRouteRouteImport } from './routes/fragrances/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as FragrancesIndexRouteImport } from './routes/fragrances/index'
import { Route as AuthAccountRecoveryRouteImport } from './routes/auth/account-recovery'
import { Route as FragrancesIdRouteRouteImport } from './routes/fragrances/$id/route'
import { Route as UsersIdIndexRouteImport } from './routes/users/$id/index'
import { Route as FragrancesIdIndexRouteImport } from './routes/fragrances/$id/index'

const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRouteRoute = SearchRouteRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const FragrancesRouteRoute = FragrancesRouteRouteImport.update({
  id: '/fragrances',
  path: '/fragrances',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchRouteRoute,
} as any)
const FragrancesIndexRoute = FragrancesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FragrancesRouteRoute,
} as any)
const AuthAccountRecoveryRoute = AuthAccountRecoveryRouteImport.update({
  id: '/auth/account-recovery',
  path: '/auth/account-recovery',
  getParentRoute: () => rootRouteImport,
} as any)
const FragrancesIdRouteRoute = FragrancesIdRouteRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => FragrancesRouteRoute,
} as any)
const UsersIdIndexRoute = UsersIdIndexRouteImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const FragrancesIdIndexRoute = FragrancesIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FragrancesIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/fragrances': typeof FragrancesRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/fragrances/$id': typeof FragrancesIdRouteRouteWithChildren
  '/auth/account-recovery': typeof AuthAccountRecoveryRoute
  '/fragrances/': typeof FragrancesIndexRoute
  '/search/': typeof SearchIndexRoute
  '/users/': typeof UsersIndexRoute
  '/fragrances/$id/': typeof FragrancesIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/account-recovery': typeof AuthAccountRecoveryRoute
  '/fragrances': typeof FragrancesIndexRoute
  '/search': typeof SearchIndexRoute
  '/users': typeof UsersIndexRoute
  '/fragrances/$id': typeof FragrancesIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/fragrances': typeof FragrancesRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/fragrances/$id': typeof FragrancesIdRouteRouteWithChildren
  '/auth/account-recovery': typeof AuthAccountRecoveryRoute
  '/fragrances/': typeof FragrancesIndexRoute
  '/search/': typeof SearchIndexRoute
  '/users/': typeof UsersIndexRoute
  '/fragrances/$id/': typeof FragrancesIdIndexRoute
  '/users/$id/': typeof UsersIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/fragrances'
    | '/search'
    | '/users'
    | '/fragrances/$id'
    | '/auth/account-recovery'
    | '/fragrances/'
    | '/search/'
    | '/users/'
    | '/fragrances/$id/'
    | '/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/account-recovery'
    | '/fragrances'
    | '/search'
    | '/users'
    | '/fragrances/$id'
    | '/users/$id'
  id:
    | '__root__'
    | '/'
    | '/fragrances'
    | '/search'
    | '/users'
    | '/fragrances/$id'
    | '/auth/account-recovery'
    | '/fragrances/'
    | '/search/'
    | '/users/'
    | '/fragrances/$id/'
    | '/users/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FragrancesRouteRoute: typeof FragrancesRouteRouteWithChildren
  SearchRouteRoute: typeof SearchRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  AuthAccountRecoveryRoute: typeof AuthAccountRecoveryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fragrances': {
      id: '/fragrances'
      path: '/fragrances'
      fullPath: '/fragrances'
      preLoaderRoute: typeof FragrancesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/search/': {
      id: '/search/'
      path: '/'
      fullPath: '/search/'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/fragrances/': {
      id: '/fragrances/'
      path: '/'
      fullPath: '/fragrances/'
      preLoaderRoute: typeof FragrancesIndexRouteImport
      parentRoute: typeof FragrancesRouteRoute
    }
    '/auth/account-recovery': {
      id: '/auth/account-recovery'
      path: '/auth/account-recovery'
      fullPath: '/auth/account-recovery'
      preLoaderRoute: typeof AuthAccountRecoveryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fragrances/$id': {
      id: '/fragrances/$id'
      path: '/$id'
      fullPath: '/fragrances/$id'
      preLoaderRoute: typeof FragrancesIdRouteRouteImport
      parentRoute: typeof FragrancesRouteRoute
    }
    '/users/$id/': {
      id: '/users/$id/'
      path: '/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/fragrances/$id/': {
      id: '/fragrances/$id/'
      path: '/'
      fullPath: '/fragrances/$id/'
      preLoaderRoute: typeof FragrancesIdIndexRouteImport
      parentRoute: typeof FragrancesIdRouteRoute
    }
  }
}

interface FragrancesIdRouteRouteChildren {
  FragrancesIdIndexRoute: typeof FragrancesIdIndexRoute
}

const FragrancesIdRouteRouteChildren: FragrancesIdRouteRouteChildren = {
  FragrancesIdIndexRoute: FragrancesIdIndexRoute,
}

const FragrancesIdRouteRouteWithChildren =
  FragrancesIdRouteRoute._addFileChildren(FragrancesIdRouteRouteChildren)

interface FragrancesRouteRouteChildren {
  FragrancesIdRouteRoute: typeof FragrancesIdRouteRouteWithChildren
  FragrancesIndexRoute: typeof FragrancesIndexRoute
}

const FragrancesRouteRouteChildren: FragrancesRouteRouteChildren = {
  FragrancesIdRouteRoute: FragrancesIdRouteRouteWithChildren,
  FragrancesIndexRoute: FragrancesIndexRoute,
}

const FragrancesRouteRouteWithChildren = FragrancesRouteRoute._addFileChildren(
  FragrancesRouteRouteChildren,
)

interface SearchRouteRouteChildren {
  SearchIndexRoute: typeof SearchIndexRoute
}

const SearchRouteRouteChildren: SearchRouteRouteChildren = {
  SearchIndexRoute: SearchIndexRoute,
}

const SearchRouteRouteWithChildren = SearchRouteRoute._addFileChildren(
  SearchRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersIndexRoute: typeof UsersIndexRoute
  UsersIdIndexRoute: typeof UsersIdIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersIndexRoute: UsersIndexRoute,
  UsersIdIndexRoute: UsersIdIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FragrancesRouteRoute: FragrancesRouteRouteWithChildren,
  SearchRouteRoute: SearchRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  AuthAccountRecoveryRoute: AuthAccountRecoveryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
