/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment PageInfoBase on PageInfo {\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n": typeof types.PageInfoBaseFragmentDoc,
    "\n  fragment FragranceConnection on FragranceConnection {\n    edges {\n      node {\n        ...FragranceSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": typeof types.FragranceConnectionFragmentDoc,
    "\n  fragment FragranceImageConnection on FragranceImageConnection {\n    edges {\n      node {\n        ...FragranceImageSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": typeof types.FragranceImageConnectionFragmentDoc,
    "\n  fragment FragranceAccordConnection on FragranceAccordConnection {\n    edges {\n      node {\n        ...FragranceAccordSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": typeof types.FragranceAccordConnectionFragmentDoc,
    "\n  fragment FragranceNoteConnection on FragranceNoteConnection {\n    edges {\n      node {\n        ...FragranceNoteSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": typeof types.FragranceNoteConnectionFragmentDoc,
    "\n  fragment FragranceReviewConnection on FragranceReviewConnection {\n    edges {\n      node {\n        ...FragranceReviewSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": typeof types.FragranceReviewConnectionFragmentDoc,
    "\n  fragment FragranceSummary on Fragrance {\n    id\n    brand\n    name\n    votes {\n      voteScore\n      likesCount\n      myVote\n    }\n    images(input: { first: 1 }) {\n      ...FragranceImageConnection \n    }\n  }\n": typeof types.FragranceSummaryFragmentDoc,
    "\n  fragment FragranceImageSummary on FragranceImage {\n    id\n    src\n    bg\n  }\n": typeof types.FragranceImageSummaryFragmentDoc,
    "\n  fragment FragranceTraitSummary on FragranceTrait {\n    type\n    voteScore\n    myVote\n  }\n": typeof types.FragranceTraitSummaryFragmentDoc,
    "\n  fragment FragranceAccordSummary on FragranceAccord {\n    id\n    accordId\n    name\n    color\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n": typeof types.FragranceAccordSummaryFragmentDoc,
    "\n  fragment FragranceNoteSummary on FragranceNote {\n    id\n    noteId\n    name\n    layer\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n": typeof types.FragranceNoteSummaryFragmentDoc,
    "\n  fragment FragranceReviewSummary on FragranceReview {\n    id\n    rating\n    text\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n    user {\n      id\n      username\n    }\n  }\n": typeof types.FragranceReviewSummaryFragmentDoc,
    "\n  query SuggestedFragrances(\n    $input: PaginationInput\n  ) {\n    fragrances(input: $input) {\n      ...FragranceConnection\n    }\n  }\n": typeof types.SuggestedFragrancesDocument,
    "\n  query FragranceImages(\n    $fragranceId: Int!\n    $input: PaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      images(input: $input) {\n        ...FragranceImageConnection\n      }\n    }\n  }\n": typeof types.FragranceImagesDocument,
    "\n  query FragranceTraits(\n    $fragranceId: Int!\n  ) {\n    fragrance (id: $fragranceId) {\n      traits {\n        ...FragranceTraitSummary\n      }\n    }\n  }\n": typeof types.FragranceTraitsDocument,
    "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $input: AccordsInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $input) {\n        ...FragranceAccordConnection\n      }\n    } \n  }\n": typeof types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $input: NotesInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $input) @include(if: $includeTop) {\n          ...FragranceNoteConnection\n        }\n\n        middle(input: $input) @include(if: $includeMiddle) {\n          ...FragranceNoteConnection\n        }\n\n        base(input: $input) @include(if: $includeBase) {\n          ...FragranceNoteConnection\n        }\n      }\n    }\n  }\n": typeof types.FragranceNotesDocument,
    "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $input: VotePaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      reviews(input: $input) {\n        ...FragranceReviewConnection\n      }\n    }\n  }\n": typeof types.FragranceReviewsDocument,
    "\n  query CollectionInfo(\n    $collectionId: Int!\n  ) {\n    collection(id: $collectionId) {\n      id\n      name\n      user {\n        id\n        username\n      }\n      audit {\n        createdAt\n        updatedAt\n      } \n    }\n  }\n": typeof types.CollectionInfoDocument,
    "\n  query CollectionItems(\n    $collectionId: Int!\n    $itemsInput: PaginationInput = {\n      first: 20\n      sort: {\n        direction: ASCENDING\n      }\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    collection(id: $collectionId) {\n      id\n      items(input: $itemsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            audit {\n              createdAt\n              updatedAt\n            }\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.CollectionItemsDocument,
    "\n  mutation ConfirmForgotPassword(\n    $email: String!\n    $confirmationCode: String!\n    $newPassword: String!\n  ) {\n    confirmForgotPassword (\n      email: $email, \n      confirmationCode: $confirmationCode, \n      newPassword: $newPassword\n    )\n  }\n": typeof types.ConfirmForgotPasswordDocument,
    "\n  mutation ConfirmSignUp(\n    $email: String!\n    $confirmationCode: String!\n  ) {\n    confirmSignUp(\n      email: $email\n      confirmationCode: $confirmationCode\n    ) {\n      id\n    }\n  }\n": typeof types.ConfirmSignUpDocument,
    "\n  mutation ForgotPassword(\n    $email: String!\n  ) {\n    forgotPassword(email: $email)\n  }  \n": typeof types.ForgotPasswordDocument,
    "\n  query FragranceInfo(\n    $fragranceId: Int!\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        voteScore \n        likesCount\n        dislikesCount\n        myVote\n      }\n\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": typeof types.FragranceInfoDocument,
    "\n  mutation LogFragranceView (\n    $input: LogFragranceViewInput!\n  ) {\n    logFragranceView(input: $input)\n  }\n": typeof types.LogFragranceViewDocument,
    "\n  mutation LogIn (\n    $email: String!\n    $password: String!\n  ){\n    logIn (email: $email, password: $password) {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n": typeof types.LogInDocument,
    "\n  mutation LogOut {\n    logOut\n  }\n": typeof types.LogOutDocument,
    "\n  query MeQuery {\n    me {\n      id\n      username\n      email\n    }\n  }\n": typeof types.MeQueryDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        text\n        votes {\n          voteScore\n          likesCount\n          dislikesCount\n          myVote\n        }\n        user {\n          id\n          username\n        }\n        audit {\n          createdAt\n          updatedAt\n          deletedAt\n        }\n      }\n    }\n  }\n": typeof types.MyReviewDocument,
    "\n  mutation Refresh {\n    refresh {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n": typeof types.RefreshDocument,
    "\n  mutation ResendSignUpConfirmationCode(\n    $email: String!\n  ) {\n    resendSignUpConfirmationCode(email: $email)\n  }\n": typeof types.ResendSignUpConfirmationCodeDocument,
    "\n  mutation SignUp(\n    $email: String!\n    $password: String!\n  ) {\n    signUp(email: $email, password: $password) {\n      complete\n      delivery {\n        attribute\n        destination\n        method\n      }\n    }\n  }\n": typeof types.SignUpDocument,
    "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: PaginationInput = {\n      first: 20\n    }\n    $collectionItemsInput: PaginationInput = {\n      first: 4\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        edges {\n          node {\n            id\n            name\n            user {\n              id\n              username\n            }\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          src\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": typeof types.UserCollectionsDocument,
    "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followerCount\n      followingCount\n    }\n  }\n": typeof types.UserInfoDocument,
    "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: PaginationInput = {\n      first: 20\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        edges {\n          node {\n            id\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": typeof types.UserLikesDocument,
    "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: PaginationInput = {\n      first: 20 \n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            text\n            votes {\n              voteScore\n              likesCount\n              dislikesCount\n              myVote\n            }\n            fragrance {\n              id\n              brand\n              name\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n            audit {\n              createdAt\n              updatedAt\n              deletedAt\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": typeof types.UserReviewsDocument,
};
const documents: Documents = {
    "\n  fragment PageInfoBase on PageInfo {\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n": types.PageInfoBaseFragmentDoc,
    "\n  fragment FragranceConnection on FragranceConnection {\n    edges {\n      node {\n        ...FragranceSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": types.FragranceConnectionFragmentDoc,
    "\n  fragment FragranceImageConnection on FragranceImageConnection {\n    edges {\n      node {\n        ...FragranceImageSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": types.FragranceImageConnectionFragmentDoc,
    "\n  fragment FragranceAccordConnection on FragranceAccordConnection {\n    edges {\n      node {\n        ...FragranceAccordSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": types.FragranceAccordConnectionFragmentDoc,
    "\n  fragment FragranceNoteConnection on FragranceNoteConnection {\n    edges {\n      node {\n        ...FragranceNoteSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": types.FragranceNoteConnectionFragmentDoc,
    "\n  fragment FragranceReviewConnection on FragranceReviewConnection {\n    edges {\n      node {\n        ...FragranceReviewSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n": types.FragranceReviewConnectionFragmentDoc,
    "\n  fragment FragranceSummary on Fragrance {\n    id\n    brand\n    name\n    votes {\n      voteScore\n      likesCount\n      myVote\n    }\n    images(input: { first: 1 }) {\n      ...FragranceImageConnection \n    }\n  }\n": types.FragranceSummaryFragmentDoc,
    "\n  fragment FragranceImageSummary on FragranceImage {\n    id\n    src\n    bg\n  }\n": types.FragranceImageSummaryFragmentDoc,
    "\n  fragment FragranceTraitSummary on FragranceTrait {\n    type\n    voteScore\n    myVote\n  }\n": types.FragranceTraitSummaryFragmentDoc,
    "\n  fragment FragranceAccordSummary on FragranceAccord {\n    id\n    accordId\n    name\n    color\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n": types.FragranceAccordSummaryFragmentDoc,
    "\n  fragment FragranceNoteSummary on FragranceNote {\n    id\n    noteId\n    name\n    layer\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n": types.FragranceNoteSummaryFragmentDoc,
    "\n  fragment FragranceReviewSummary on FragranceReview {\n    id\n    rating\n    text\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n    user {\n      id\n      username\n    }\n  }\n": types.FragranceReviewSummaryFragmentDoc,
    "\n  query SuggestedFragrances(\n    $input: PaginationInput\n  ) {\n    fragrances(input: $input) {\n      ...FragranceConnection\n    }\n  }\n": types.SuggestedFragrancesDocument,
    "\n  query FragranceImages(\n    $fragranceId: Int!\n    $input: PaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      images(input: $input) {\n        ...FragranceImageConnection\n      }\n    }\n  }\n": types.FragranceImagesDocument,
    "\n  query FragranceTraits(\n    $fragranceId: Int!\n  ) {\n    fragrance (id: $fragranceId) {\n      traits {\n        ...FragranceTraitSummary\n      }\n    }\n  }\n": types.FragranceTraitsDocument,
    "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $input: AccordsInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $input) {\n        ...FragranceAccordConnection\n      }\n    } \n  }\n": types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $input: NotesInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $input) @include(if: $includeTop) {\n          ...FragranceNoteConnection\n        }\n\n        middle(input: $input) @include(if: $includeMiddle) {\n          ...FragranceNoteConnection\n        }\n\n        base(input: $input) @include(if: $includeBase) {\n          ...FragranceNoteConnection\n        }\n      }\n    }\n  }\n": types.FragranceNotesDocument,
    "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $input: VotePaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      reviews(input: $input) {\n        ...FragranceReviewConnection\n      }\n    }\n  }\n": types.FragranceReviewsDocument,
    "\n  query CollectionInfo(\n    $collectionId: Int!\n  ) {\n    collection(id: $collectionId) {\n      id\n      name\n      user {\n        id\n        username\n      }\n      audit {\n        createdAt\n        updatedAt\n      } \n    }\n  }\n": types.CollectionInfoDocument,
    "\n  query CollectionItems(\n    $collectionId: Int!\n    $itemsInput: PaginationInput = {\n      first: 20\n      sort: {\n        direction: ASCENDING\n      }\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    collection(id: $collectionId) {\n      id\n      items(input: $itemsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            audit {\n              createdAt\n              updatedAt\n            }\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CollectionItemsDocument,
    "\n  mutation ConfirmForgotPassword(\n    $email: String!\n    $confirmationCode: String!\n    $newPassword: String!\n  ) {\n    confirmForgotPassword (\n      email: $email, \n      confirmationCode: $confirmationCode, \n      newPassword: $newPassword\n    )\n  }\n": types.ConfirmForgotPasswordDocument,
    "\n  mutation ConfirmSignUp(\n    $email: String!\n    $confirmationCode: String!\n  ) {\n    confirmSignUp(\n      email: $email\n      confirmationCode: $confirmationCode\n    ) {\n      id\n    }\n  }\n": types.ConfirmSignUpDocument,
    "\n  mutation ForgotPassword(\n    $email: String!\n  ) {\n    forgotPassword(email: $email)\n  }  \n": types.ForgotPasswordDocument,
    "\n  query FragranceInfo(\n    $fragranceId: Int!\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        voteScore \n        likesCount\n        dislikesCount\n        myVote\n      }\n\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": types.FragranceInfoDocument,
    "\n  mutation LogFragranceView (\n    $input: LogFragranceViewInput!\n  ) {\n    logFragranceView(input: $input)\n  }\n": types.LogFragranceViewDocument,
    "\n  mutation LogIn (\n    $email: String!\n    $password: String!\n  ){\n    logIn (email: $email, password: $password) {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n": types.LogInDocument,
    "\n  mutation LogOut {\n    logOut\n  }\n": types.LogOutDocument,
    "\n  query MeQuery {\n    me {\n      id\n      username\n      email\n    }\n  }\n": types.MeQueryDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        text\n        votes {\n          voteScore\n          likesCount\n          dislikesCount\n          myVote\n        }\n        user {\n          id\n          username\n        }\n        audit {\n          createdAt\n          updatedAt\n          deletedAt\n        }\n      }\n    }\n  }\n": types.MyReviewDocument,
    "\n  mutation Refresh {\n    refresh {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n": types.RefreshDocument,
    "\n  mutation ResendSignUpConfirmationCode(\n    $email: String!\n  ) {\n    resendSignUpConfirmationCode(email: $email)\n  }\n": types.ResendSignUpConfirmationCodeDocument,
    "\n  mutation SignUp(\n    $email: String!\n    $password: String!\n  ) {\n    signUp(email: $email, password: $password) {\n      complete\n      delivery {\n        attribute\n        destination\n        method\n      }\n    }\n  }\n": types.SignUpDocument,
    "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: PaginationInput = {\n      first: 20\n    }\n    $collectionItemsInput: PaginationInput = {\n      first: 4\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        edges {\n          node {\n            id\n            name\n            user {\n              id\n              username\n            }\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          src\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": types.UserCollectionsDocument,
    "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followerCount\n      followingCount\n    }\n  }\n": types.UserInfoDocument,
    "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: PaginationInput = {\n      first: 20\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        edges {\n          node {\n            id\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": types.UserLikesDocument,
    "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: PaginationInput = {\n      first: 20 \n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            text\n            votes {\n              voteScore\n              likesCount\n              dislikesCount\n              myVote\n            }\n            fragrance {\n              id\n              brand\n              name\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n            audit {\n              createdAt\n              updatedAt\n              deletedAt\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": types.UserReviewsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PageInfoBase on PageInfo {\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n"): (typeof documents)["\n  fragment PageInfoBase on PageInfo {\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceConnection on FragranceConnection {\n    edges {\n      node {\n        ...FragranceSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceConnection on FragranceConnection {\n    edges {\n      node {\n        ...FragranceSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceImageConnection on FragranceImageConnection {\n    edges {\n      node {\n        ...FragranceImageSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceImageConnection on FragranceImageConnection {\n    edges {\n      node {\n        ...FragranceImageSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceAccordConnection on FragranceAccordConnection {\n    edges {\n      node {\n        ...FragranceAccordSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceAccordConnection on FragranceAccordConnection {\n    edges {\n      node {\n        ...FragranceAccordSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceNoteConnection on FragranceNoteConnection {\n    edges {\n      node {\n        ...FragranceNoteSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceNoteConnection on FragranceNoteConnection {\n    edges {\n      node {\n        ...FragranceNoteSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceReviewConnection on FragranceReviewConnection {\n    edges {\n      node {\n        ...FragranceReviewSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceReviewConnection on FragranceReviewConnection {\n    edges {\n      node {\n        ...FragranceReviewSummary\n      }\n    }\n    pageInfo {\n      ...PageInfoBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceSummary on Fragrance {\n    id\n    brand\n    name\n    votes {\n      voteScore\n      likesCount\n      myVote\n    }\n    images(input: { first: 1 }) {\n      ...FragranceImageConnection \n    }\n  }\n"): (typeof documents)["\n  fragment FragranceSummary on Fragrance {\n    id\n    brand\n    name\n    votes {\n      voteScore\n      likesCount\n      myVote\n    }\n    images(input: { first: 1 }) {\n      ...FragranceImageConnection \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceImageSummary on FragranceImage {\n    id\n    src\n    bg\n  }\n"): (typeof documents)["\n  fragment FragranceImageSummary on FragranceImage {\n    id\n    src\n    bg\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceTraitSummary on FragranceTrait {\n    type\n    voteScore\n    myVote\n  }\n"): (typeof documents)["\n  fragment FragranceTraitSummary on FragranceTrait {\n    type\n    voteScore\n    myVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceAccordSummary on FragranceAccord {\n    id\n    accordId\n    name\n    color\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceAccordSummary on FragranceAccord {\n    id\n    accordId\n    name\n    color\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceNoteSummary on FragranceNote {\n    id\n    noteId\n    name\n    layer\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceNoteSummary on FragranceNote {\n    id\n    noteId\n    name\n    layer\n    isFill\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FragranceReviewSummary on FragranceReview {\n    id\n    rating\n    text\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n    user {\n      id\n      username\n    }\n  }\n"): (typeof documents)["\n  fragment FragranceReviewSummary on FragranceReview {\n    id\n    rating\n    text\n    votes {\n      voteScore\n      likesCount\n      dislikesCount\n      myVote\n    }\n    user {\n      id\n      username\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SuggestedFragrances(\n    $input: PaginationInput\n  ) {\n    fragrances(input: $input) {\n      ...FragranceConnection\n    }\n  }\n"): (typeof documents)["\n  query SuggestedFragrances(\n    $input: PaginationInput\n  ) {\n    fragrances(input: $input) {\n      ...FragranceConnection\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceImages(\n    $fragranceId: Int!\n    $input: PaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      images(input: $input) {\n        ...FragranceImageConnection\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceImages(\n    $fragranceId: Int!\n    $input: PaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      images(input: $input) {\n        ...FragranceImageConnection\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceTraits(\n    $fragranceId: Int!\n  ) {\n    fragrance (id: $fragranceId) {\n      traits {\n        ...FragranceTraitSummary\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceTraits(\n    $fragranceId: Int!\n  ) {\n    fragrance (id: $fragranceId) {\n      traits {\n        ...FragranceTraitSummary\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $input: AccordsInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $input) {\n        ...FragranceAccordConnection\n      }\n    } \n  }\n"): (typeof documents)["\n  query FragranceAccords(\n    $fragranceId: Int!\n    $input: AccordsInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $input) {\n        ...FragranceAccordConnection\n      }\n    } \n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $input: NotesInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $input) @include(if: $includeTop) {\n          ...FragranceNoteConnection\n        }\n\n        middle(input: $input) @include(if: $includeMiddle) {\n          ...FragranceNoteConnection\n        }\n\n        base(input: $input) @include(if: $includeBase) {\n          ...FragranceNoteConnection\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $input: NotesInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $input) @include(if: $includeTop) {\n          ...FragranceNoteConnection\n        }\n\n        middle(input: $input) @include(if: $includeMiddle) {\n          ...FragranceNoteConnection\n        }\n\n        base(input: $input) @include(if: $includeBase) {\n          ...FragranceNoteConnection\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $input: VotePaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      reviews(input: $input) {\n        ...FragranceReviewConnection\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceReviews(\n    $fragranceId: Int!\n    $input: VotePaginationInput\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      reviews(input: $input) {\n        ...FragranceReviewConnection\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectionInfo(\n    $collectionId: Int!\n  ) {\n    collection(id: $collectionId) {\n      id\n      name\n      user {\n        id\n        username\n      }\n      audit {\n        createdAt\n        updatedAt\n      } \n    }\n  }\n"): (typeof documents)["\n  query CollectionInfo(\n    $collectionId: Int!\n  ) {\n    collection(id: $collectionId) {\n      id\n      name\n      user {\n        id\n        username\n      }\n      audit {\n        createdAt\n        updatedAt\n      } \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectionItems(\n    $collectionId: Int!\n    $itemsInput: PaginationInput = {\n      first: 20\n      sort: {\n        direction: ASCENDING\n      }\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    collection(id: $collectionId) {\n      id\n      items(input: $itemsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            audit {\n              createdAt\n              updatedAt\n            }\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionItems(\n    $collectionId: Int!\n    $itemsInput: PaginationInput = {\n      first: 20\n      sort: {\n        direction: ASCENDING\n      }\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    collection(id: $collectionId) {\n      id\n      items(input: $itemsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            audit {\n              createdAt\n              updatedAt\n            }\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConfirmForgotPassword(\n    $email: String!\n    $confirmationCode: String!\n    $newPassword: String!\n  ) {\n    confirmForgotPassword (\n      email: $email, \n      confirmationCode: $confirmationCode, \n      newPassword: $newPassword\n    )\n  }\n"): (typeof documents)["\n  mutation ConfirmForgotPassword(\n    $email: String!\n    $confirmationCode: String!\n    $newPassword: String!\n  ) {\n    confirmForgotPassword (\n      email: $email, \n      confirmationCode: $confirmationCode, \n      newPassword: $newPassword\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConfirmSignUp(\n    $email: String!\n    $confirmationCode: String!\n  ) {\n    confirmSignUp(\n      email: $email\n      confirmationCode: $confirmationCode\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmSignUp(\n    $email: String!\n    $confirmationCode: String!\n  ) {\n    confirmSignUp(\n      email: $email\n      confirmationCode: $confirmationCode\n    ) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ForgotPassword(\n    $email: String!\n  ) {\n    forgotPassword(email: $email)\n  }  \n"): (typeof documents)["\n  mutation ForgotPassword(\n    $email: String!\n  ) {\n    forgotPassword(email: $email)\n  }  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FragranceInfo(\n    $fragranceId: Int!\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        voteScore \n        likesCount\n        dislikesCount\n        myVote\n      }\n\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceInfo(\n    $fragranceId: Int!\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        voteScore \n        likesCount\n        dislikesCount\n        myVote\n      }\n\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LogFragranceView (\n    $input: LogFragranceViewInput!\n  ) {\n    logFragranceView(input: $input)\n  }\n"): (typeof documents)["\n  mutation LogFragranceView (\n    $input: LogFragranceViewInput!\n  ) {\n    logFragranceView(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LogIn (\n    $email: String!\n    $password: String!\n  ){\n    logIn (email: $email, password: $password) {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n"): (typeof documents)["\n  mutation LogIn (\n    $email: String!\n    $password: String!\n  ){\n    logIn (email: $email, password: $password) {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LogOut {\n    logOut\n  }\n"): (typeof documents)["\n  mutation LogOut {\n    logOut\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MeQuery {\n    me {\n      id\n      username\n      email\n    }\n  }\n"): (typeof documents)["\n  query MeQuery {\n    me {\n      id\n      username\n      email\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        text\n        votes {\n          voteScore\n          likesCount\n          dislikesCount\n          myVote\n        }\n        user {\n          id\n          username\n        }\n        audit {\n          createdAt\n          updatedAt\n          deletedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        text\n        votes {\n          voteScore\n          likesCount\n          dislikesCount\n          myVote\n        }\n        user {\n          id\n          username\n        }\n        audit {\n          createdAt\n          updatedAt\n          deletedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Refresh {\n    refresh {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n"): (typeof documents)["\n  mutation Refresh {\n    refresh {\n      idToken\n      accessToken\n      expiresIn\n    }\n  }  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ResendSignUpConfirmationCode(\n    $email: String!\n  ) {\n    resendSignUpConfirmationCode(email: $email)\n  }\n"): (typeof documents)["\n  mutation ResendSignUpConfirmationCode(\n    $email: String!\n  ) {\n    resendSignUpConfirmationCode(email: $email)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SignUp(\n    $email: String!\n    $password: String!\n  ) {\n    signUp(email: $email, password: $password) {\n      complete\n      delivery {\n        attribute\n        destination\n        method\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SignUp(\n    $email: String!\n    $password: String!\n  ) {\n    signUp(email: $email, password: $password) {\n      complete\n      delivery {\n        attribute\n        destination\n        method\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: PaginationInput = {\n      first: 20\n    }\n    $collectionItemsInput: PaginationInput = {\n      first: 4\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        edges {\n          node {\n            id\n            name\n            user {\n              id\n              username\n            }\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          src\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: PaginationInput = {\n      first: 20\n    }\n    $collectionItemsInput: PaginationInput = {\n      first: 4\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        edges {\n          node {\n            id\n            name\n            user {\n              id\n              username\n            }\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          src\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followerCount\n      followingCount\n    }\n  }\n"): (typeof documents)["\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followerCount\n      followingCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: PaginationInput = {\n      first: 20\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        edges {\n          node {\n            id\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserLikes(\n    $userId: Int!\n    $likesInput: PaginationInput = {\n      first: 20\n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        edges {\n          node {\n            id\n            fragrance {\n              id\n              brand\n              name\n              votes {\n                voteScore\n                likesCount\n                dislikesCount\n                myVote\n              }\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: PaginationInput = {\n      first: 20 \n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            text\n            votes {\n              voteScore\n              likesCount\n              dislikesCount\n              myVote\n            }\n            fragrance {\n              id\n              brand\n              name\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n            audit {\n              createdAt\n              updatedAt\n              deletedAt\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: PaginationInput = {\n      first: 20 \n    }\n    $imagesInput: PaginationInput = {\n      first: 1\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            text\n            votes {\n              voteScore\n              likesCount\n              dislikesCount\n              myVote\n            }\n            fragrance {\n              id\n              brand\n              name\n              images(input: $imagesInput) {\n                edges {\n                  node {\n                    id\n                    src\n                  }\n                }\n              }\n            }\n            audit {\n              createdAt\n              updatedAt\n              deletedAt\n            }\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;